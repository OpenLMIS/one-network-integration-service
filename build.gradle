buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    id "com.moowork.node" version "0.12"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'pmd'

group = serviceGroup
version = serviceVersion
archivesBaseName = rootProject.name
project.ext.buildTime = java.time.Instant.now().toString() // for versioning
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile 'org.openlmis:openlmis-service-util:3.0.0'
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.2.2.RELEASE"

    compile "org.projectlombok:lombok"
    compile "com.google.guava:guava:18.0"
    compile 'org.webjars.npm:api-console:3.0.17'
    compile 'org.apache.commons:commons-lang3'
    compile 'org.apache.commons:commons-csv:1.4'
    compile 'org.apache.commons:commons-collections4:4.2'
    compile 'commons-io:commons-io:2.5'
    compile "org.slf4j:slf4j-ext"
    compile "com.github.tomakehurst:wiremock:1.58"

    compile group: 'javax.interceptor', name: 'javax.interceptor-api', version: '1.2'
    implementation group: 'com.jcraft', name: 'jsch', version: '0.1.55'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.1'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: '2.11.1'

    testCompile "junit:junit"
    testCompile "org.powermock:powermock-api-mockito2:2.0.4"
    testCompile "org.powermock:powermock-module-junit4:2.0.4"
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile 'org.springframework.security:spring-security-test'
    testCompile "org.springframework:spring-test"
    testCompile ('org.apache.sshd:apache-sshd:2.7.0') {
        exclude group: 'org.apache.sshd', module: 'sshd-netty'
        exclude group: 'org.apache.sshd', module: 'sshd-mina'
    }
    testCompile 'com.jcraft:jsch:0.1.55'

    testCompile "com.jayway.restassured:rest-assured:2.7.0"
    testCompile "guru.nidi.raml:raml-tester:0.8.15"
    testCompile "org.raml:raml-parser:0.8.37"
    testCompile "nl.jqno.equalsverifier:equalsverifier:2.4"
    testCompile "be.joengenduvel.java.verifiers:to-string:1.0.2"
}

idea {
    project {
        vcs = 'Git'
        ipr.withXml { xmlFile ->
            // enable 'Annotation Processors', source: https://gist.github.com/stephanos/8645809
            xmlFile.asNode().component
                    .find { it.@name == 'CompilerConfiguration' }['annotationProcessing'][0]
                    .replaceNode {
                        annotationProcessing {
                            profile(default: true, name: 'Default', useClasspath: 'true', enabled: true)
                        }
                    }
        }
    }
    module {
        sourceDirs -= file('src/integration-test/java')
        testSourceDirs += file('src/integration-test/java')
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }

    main {
        resources {
            srcDirs "src/main/resources", "build/data"
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
    mustRunAfter test
    environment 'BASE_URL', "http://localhost"
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
    reports.junitXml.destination = file("${testResultsDir}/${name}")
    environment 'BASE_URL', "http://localhost"
}

task checkApiIsRaml(type:Exec) {
    executable "raml-cop"
    args "src/main/resources/api-definition.yaml"
}

configure(checkApiIsRaml) {
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = 'Verify that the api-specification is valid RAML'
}

jacocoTestReport {
    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled false
        html.enabled true
        csv.enabled false
    }

    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
}

checkstyle {
    toolVersion = "8.12"
}

pmd {
    toolVersion = '5.4.0'
    consoleOutput= true
    ignoreFailures = false
    ruleSetFiles = files("config/pmd/ruleset.xml")
    reportsDir = file("build/reports/pmd")
}

tasks.withType(Pmd){
    reports {
        xml.enabled true
        html.enabled true
    }
}

test {
    testLogging {
        events 'started', 'passed'
        exceptionFormat = 'full'
    }
}

apply from: "documentation.gradle"
integrationTest {
    dependsOn ramlToHtml
}

processResources {
    // we want the generated HTML spec file included in the output jar
    finalizedBy ramlToHtml
    // update version information in build
    filesMatching('**/version.properties') {
        expand(project.properties)
    }
}

check {
    dependsOn checkApiIsRaml
    dependsOn integrationTest
}

apply from: "registration.gradle"

build {
    dependsOn jacocoTestReport
    dependsOn check
    dependsOn ramlToHtml
    dependsOn copyRamlHtmlToBuild
    dependsOn copyConsulRegistrationToBuild
}
